/**
 * A base class for all Grits renderer extensions.
 *
 * @class Dasix.grits.AbsRenderExtension
 * @extends qx.core.Object
 * @author Luke Chavers <luke@chavers.io>
 * @since 0.1.0
 * @version 0.1.0
 * @copyright 2016 Dasix, Inc. All rights reserved.
 */

var qx = require( "qooxdoo" );
var _ = require( "lodash" );
var Promise = require( "bluebird" );
var tipe = require( "tipe" );

qx.Class.define(
	"Dasix.grits.AbsRenderExtension", {

		extend : qx.core.Object,

		/**
		 * @constructs Dasix.grits.AbsRenderExtension
		 * @param {Dasix.grits.Renderer} grits The grits renderer object in which
		 * this extension is extending.
		 */
		construct : function( grits ) {

			// Locals
			var me = this;

			// Grits MUST be defined
			if( grits === undefined || grits === null || grits.classname === undefined || grits.classname !== "Dasix.grits.Renderer" ) {
				throw new Error("Grits extension was instantiated without a reference to a Grits renderer object.");
			}

			// Store reference to grits renderer
			me.$$grits = grits;

			// Default log topic
			me.setLogTopic( null );

			// Call init(), if its available
			if( tipe( me.init ) === "function" ) {
				me.init();
			}

		},

		members : /** @lends Dasix.grits.AbsRenderExtension **/ {

			/**
			 * Sets the topic [prefix] for all log messages generated by the extension.
			 *
			 * @instance
			 * @access protected
			 * @param {string} newTopic
			 * @returns {void}
			 */
			setLogTopic: function( newTopic ) {

				var me = this;

				if( newTopic === undefined || newTopic === null || tipe(newTopic) !== "string" ) {
					newTopic = "extension";
				}

				me.$$logTopic = newTopic;

			},

			/**
			 * Returns a reference to the grits renderer object to which this
			 * extension is attached.
			 *
			 * @instance
			 * @access protected
			 * @returns {Dasix.grits.Renderer}
			 */
			getGrits: function() {
				var me = this;
				return me.$$grits;
			},

			/**
			 * This convenience alias exposes [plugin] event emission on the
			 * attached Grits renderer object.
			 *
			 * @instance
			 * @access protected
			 * @param {string} eventName The name of the event to emit.
			 * @param {?object} [eventData=NULL] Additional data to include in the event
			 * @returns {void}
			 */
			emit: function( eventName, eventData ) {

				var me = this;
				var grits = me.getGrits();
				grits._callPluginEventOnAll( eventName, eventData );

			},

			/**
			 * Logs a message using a predefined log topic.
			 *
			 * @instance
			 * @access protected
			 * @param {string|string[]} message The log message to emit.
			 * @returns {void}
			 */
			log: function( message ) {

				var me = this;
				var grits = me.getGrits();
				return grits.log( me.$$logTopic, message );

			},

			/**
			 * Logs an error using a predefined log topic.  This method will
			 * cause the render operation to halt and the Grits application to exit.
			 *
			 * @instance
			 * @access protected
			 * @param {Error} err The error to log
			 * @returns {void}
			 */
			logError: function( err ) {

				var me = this;
				var grits = me.getGrits();
				grits.logError( me.$$logTopic, err );

			},

			/**
			 * Logs a bit of source code or file content, with helpful
			 * markup like line numbers.
			 *
			 * @instance
			 * @access protected
			 * @param {string} name A name for the content, to make it easily identifiable.
			 * @param {string} content The content to log
			 * @returns {void}
			 */
			logSource: function( name, content ) {

				var me = this;
				var grits = me.getGrits();
				grits.logSource( me.$$logTopic, name, content );

			}


		}
	}
);
